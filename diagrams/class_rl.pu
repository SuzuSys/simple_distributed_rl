@startuml class_rl

enum RLActionType {
    ANY
    DISCRETE
    CONTINUOUS
}

enum RLObservationType {
    ANY
    DISCRETE
    CONTINUOUS
}


class EnvRun {}


class WorkerRun {
    on_reset()
    policy()
    on_step()
    render()
}

WorkerRun - EnvRun

note "Keeps run-time state." as WorkerRunMemo
WorkerRun . WorkerRunMemo


abstract WorkerBase {
    on_reset()
    policy()
    on_step()
    render()
}
WorkerBase -- WorkerRun



abstract RuleBaseWorker {
    call_on_reset()
    call_policy()
    call_on_step()
    call_render()
}

RuleBaseWorker -- WorkerBase


abstract ExtendWorker {
    call_on_reset()
    call_policy()
    call_on_step()
    call_render()
}

ExtendWorker -- WorkerBase



abstract RLWorker {
    config : RLConfig
    parameter : RLParameter
    remote_memory : RLRemoteMemory
    actor_id : int
    call_on_reset()
    call_policy()
    call_on_step()
    call_render()
}


RLWorker -- WorkerBase

note "Absorbs the difference with \nthe environment.\n(action, observation)" as RLWorkerMemo
RLWorker .. RLWorkerMemo


abstract RLTrainer {
    config : RLConfig
    parameter : RLParameter
    remote_memory : RLRemoteMemory
    train()
    get_train_count()
}

abstract RLRemoteMemory {
    config : RLConfig
    backup()
    restore()
}

abstract RLParameter {
    config : RLConfig
    restore()
    backup()
}


abstract RLConfig {
    {static} getName() : str
    action_type : RLActionType
    observation_type : RLObservationType
}
RLActionType .. RLConfig
RLObservationType .. RLConfig

RLConfig --- RLWorker
RLConfig --- RLTrainer
RLConfig -- RLParameter
RLConfig -- RLRemoteMemory

RLParameter -- RLWorker
RLParameter -- RLTrainer
RLRemoteMemory -- RLWorker
RLRemoteMemory -- RLTrainer


@enduml