@startuml playflow
autoactivate on

actor User

participant EnvRun
participant EnvBase

participant WorkerRun
participant Worker

participant Trainer
participant Parameter
participant RemoteMemory


activate User

User -> EnvRun: reset()
    EnvRun -> EnvBase: reset()
    return state, next_player_index
return

User -> WorkerRun: on_reset(env, player_index)
    note right: init episode parameter
return

User -> EnvRun: render()
    EnvRun -> EnvBase: rendering
    return
return

loop episode

    User -> WorkerRun: policy(env)
        note right
        if self.player_index != env.next_player_index:
            return None
        end note

        alt 1st week
            WorkerRun -> Worker: on_reset(env)
                note right
                state = <color blue>encode(env.state)</color>
                end note
                Worker -> Worker: call_on_reset(state)
                return
            return
        else After the 2nd week
            WorkerRun -> Worker: on_step(env)
                note right
                next_state = <color blue>encode(env.state)</color>
                end note
                Worker -> Worker: call_on_step(next_state, reward, done)
                    Worker -> RemoteMemory: add batchs
                    return
                return
            return info
        end

        WorkerRun -> Worker: policy(env)
            note right
            state = <color blue>encode(env.state)</color>
            end note
            Worker -> Worker: call_policy(state)
            return action
            note right
            action = <color red>decode(action)</color>
            end note
        return action
    return action

    User -> WorkerRun: render(env)
        WorkerRun -> Worker: render(env)
        return
    return
    
    User -> EnvRun: step(action)
        EnvRun -> EnvBase: step(action)
        return state, reward, done, next_player_index
    return

    User -> WorkerRun: on_step(env)
        note right
        save step reward
        end note
        alt done
            WorkerRun -> Worker: on_reset(env)
            return
        end
    return

    User -> Trainer: train
        Trainer -> RemoteMemory: samples
        return batchs
        Trainer -> Parameter: update parameter
        return
    return info

    User -> EnvRun: render()
        EnvRun -> EnvBase: rendering
        return
    return

end
deactivate User

@enduml